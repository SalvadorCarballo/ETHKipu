{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenB",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "LiquidityAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "LiquidityRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountAIn",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountBOut",
						"type": "uint256"
					}
				],
				"name": "TokensSwappedAB",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountBIn",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountAOut",
						"type": "uint256"
					}
				],
				"name": "TokensSwappedBA",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "balanceofA",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "balanceofB",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "getPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountAIn",
						"type": "uint256"
					}
				],
				"name": "swapAforB",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountBIn",
						"type": "uint256"
					}
				],
				"name": "swapBforA",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenA",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenB",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Salvador Carballo",
			"details": "Uses the constant product formula for swaps",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"LiquidityAdded(uint256,uint256)": {
					"params": {
						"amountA": "The amount of token A added to the pool",
						"amountB": "The amount of token B added to the pool"
					}
				},
				"LiquidityRemoved(uint256,uint256)": {
					"params": {
						"amountA": "The amount of token A removed from the pool",
						"amountB": "The amount of token B removed from the pool"
					}
				},
				"TokensSwappedAB(address,uint256,uint256)": {
					"params": {
						"amountAIn": "The amount of token A swapped",
						"amountBOut": "The amount of token B received",
						"user": "The address of the user performing the swap"
					}
				},
				"TokensSwappedBA(address,uint256,uint256)": {
					"params": {
						"amountAOut": "The amount of token A received",
						"amountBIn": "The amount of token B swapped",
						"user": "The address of the user performing the swap"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"addLiquidity(uint256,uint256)": {
					"details": "Only callable by the owner",
					"params": {
						"amountA": "The amount of token A to add",
						"amountB": "The amount of token B to add"
					}
				},
				"constructor": {
					"params": {
						"_tokenA": "The address of token A",
						"_tokenB": "The address of token B",
						"initialOwner": "The address of the initial owner"
					}
				},
				"getPrice(address)": {
					"params": {
						"_token": "The address of the token to price"
					},
					"returns": {
						"_0": "The price of the token in terms of the other token"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeLiquidity(uint256,uint256)": {
					"details": "Only callable by the owner",
					"params": {
						"amountA": "The amount of token A to remove",
						"amountB": "The amount of token B to remove"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"swapAforB(uint256)": {
					"params": {
						"amountAIn": "The amount of token A to swap"
					}
				},
				"swapBforA(uint256)": {
					"params": {
						"amountBIn": "The amount of token B to swap"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "Simple Decentralized Exchange (DEX)",
			"version": 1
		},
		"userdoc": {
			"events": {
				"LiquidityAdded(uint256,uint256)": {
					"notice": "Emitted when liquidity is added"
				},
				"LiquidityRemoved(uint256,uint256)": {
					"notice": "Emitted when liquidity is removed"
				},
				"TokensSwappedAB(address,uint256,uint256)": {
					"notice": "Emitted when token A is swapped for token B"
				},
				"TokensSwappedBA(address,uint256,uint256)": {
					"notice": "Emitted when token B is swapped for token A"
				}
			},
			"kind": "user",
			"methods": {
				"addLiquidity(uint256,uint256)": {
					"notice": "Adds liquidity to the pool"
				},
				"balanceofA()": {
					"notice": "Stores the amount of token A in the liquidity pool"
				},
				"balanceofB()": {
					"notice": "Stores the amount of token B in the liquidity pool"
				},
				"constructor": {
					"notice": "Initializes the DEX with the two tokens and sets the initial owner"
				},
				"getPrice(address)": {
					"notice": "Calculates the relative price of one token in terms of the other"
				},
				"removeLiquidity(uint256,uint256)": {
					"notice": "Removes liquidity from the pool"
				},
				"swapAforB(uint256)": {
					"notice": "Swaps token A for token B"
				},
				"swapBforA(uint256)": {
					"notice": "Swaps token B for token A"
				},
				"tokenA()": {
					"notice": "ERC-20 token A in the liquidity pool"
				},
				"tokenB()": {
					"notice": "ERC-20 token B in the liquidity pool"
				}
			},
			"notice": "This contract facilitates token swaps and liquidity managementThe comment format was updated according to the model that was indicatedAs suggested in the feedback, the Ownable library was added. When doing so, the compiler gave an error requesting that a parameter with the address of the initial owner of the contract be added to the constructor. It seems that the version of OpenZeppelin that I have in Remix does not automatically assign the person who deploys the contract as the initial owner",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"ETHKIPU/simpleDEX/simpleDEX_v2.sol": "SimpleDEX"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"ETHKIPU/simpleDEX/simpleDEX_v2.sol": {
			"keccak256": "0xdeb89a73b71b5e50647cfa8b8b0e15680b6f3f9f1b8c031d6b357ec057e02762",
			"license": "MIT",
			"urls": [
				"bzz-raw://e26fa9ce87d62cdcefa42b7a6bd3b0564483ece4ec6ad865951bb63fbe104101",
				"dweb:/ipfs/QmTUqj52hFx1NSwnXja2zEREGGPDd82ZQ6TNZkW5o418ho"
			]
		}
	},
	"version": 1
}